---
title: "Class12"
author: "Yipeng Li"
format: pdf
editor: visual
---

Install `DESeq2` package by `BiocManager::install("DESeq2")`

```{r}
#library(DESeq2)
```

Here we will use the DESeq2 package for RNASeq analysis. The data for todays class come from a study of airway smooth muscle clees treated with dexamethasone, a synthetic glucocorticoid steriod with anti=inflammatory effects (Himes et al. 2014).

## Import their data

We need two things for this analysis:

- **countData** (counts for every transcript/gene in each experiment)
- **colData** (metadata that describes the experiment setup)

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(counts)
```

```{r}
head(metadata)
```

>Q1. How many genes are in this dataset? 

```{r}
nrow(counts)
```


>Q2. How many ‘control’ cell lines do we have? 

```{r}
table(metadata$dex)
```

Another way

```{r}
sum(metadata$dex == "control")
```

- step 1.
Calculate the mean of the control samples (i.e. columns in CountData)
Calculate the mean of the treatment samples

(a) We need to find which columns are "control" samples.
  - look in the metadata (a.k.a. coldata), $dex column

```{r}
control.inds <- metadata$dex == "control"
```

(b) extract all the control columns from `countData` and call it `data.control`

```{r}
data.control <- counts[,control.inds]
```

(c) Calculate the mean value across the rows of `control.counts` i.e. calculate the mean count values for each gene in the control samples

```{r}
control.means <- rowMeans(data.control)
```

- Step 2.
Calculate the mean of the treated samples

```{r}
treatment.inds <- metadata$dex == "treated"
data.treatment <- counts[,treatment.inds]
treatment.means <- rowMeans(data.treatment)
head(treatment.means)
```

We now have control and treated mean count values. For ease of book-keeping I will combine these vectors into a new data.frame called `meancounts`

```{r}
meancounts <- data.frame(control.means, treatment.means)
head(meancounts)
```

```{r}
plot(meancounts)
```

```{r}
plot(meancounts, log="xy")
```

We use log transforms for skewed data such as this and because we really care most about relative changes in magnitude.

We most often use log2 as our transform as the math is easier to interprat than log10 or others.

If we have no change - i.e. same values in control and treated we will have a log2 value of zero

```{r}
log2(20/20)
```
If I have double the amount i.3. 20 compared to 10 for example I will have a log2 fold-change of +1

```{r}
log2(20/10)
```

If I have half the amount I will have a log2 fold-change of -1

```{r}
log2(10/20)
```


```{r}
log2(40/10)
```

```{r}
meancounts$log2fc <- log2(meancounts$treatment.means / meancounts$control.means)
head(meancounts)
```

> Q. How many genes are up regulated at the common threshold of +2 log2FC values?

```{r}
sum(meancounts$log2fc >= 2, na.rm=TRUE)
```

Hold on what about the stats! Yes there are big changes but are these changes significant!!

To do this properly we will turn to the DESeq2 package

#DESeq2 analysis

```{r}
#| message: false
library(DESeq2)
```

To use DESeq we need our input countData and colData in a specific format that DESeq wants:

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                       colData = metadata,
                       design = ~dex)
```
To run the analysis I can now use the main DESeq2 function called `DESeq()` with `dds` as input.

```{r}
dds <- DESeq(dds)
```

To get the results out of this `dds` object we can use the `results()` function from the package.

```{r}
res <- results(dds)
head(res)
```

Let's make a final (for today) plots of log2 fold-change vs the adjusted P-value.

```{r}
plot(res$log2FoldChange,res$padj)
```

It is the low P-values that we care about and these are lost in the skewed plot above. Let's take the log of the $padj values for our plot.

```{r}
plot(res$log2FoldChange,-log(res$padj))
abline(v=c(+2,-2), col="blue")
abline(h=-log(0.05), col="blue")
```

Finally we can make a color vector to use in the plot to better highlight the genes we care about

```{r}
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 
mycols[ res$padj>0.05 ]  <- "lightblue" 

plot(res$log2FoldChange,-log(res$padj), col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )
abline(v=c(+2,-2), col="blue")
abline(h=-log(0.05), col="blue")
```

Still To Do:

- add annotation 
- save the results as CSV file
- Do some Pathway Analysis (KEGG and GO)

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
head(res)
```

We can translate (s.k.a. "map") between all these database id formats:
```{r}
columns(org.Hs.eg.db)
```

My IDs are stored as the rowname of `res`
```{r}
head(rownames(res))
```


```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")
```

```{r}
head(res)
```

>Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="ENTREZID",          # The new format we want to add
                     multiVals="first")
```

```{r}
res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="GENENAME",          # The new format we want to add
                     multiVals="first")
```

```{r}
head(res)
```

## Save our results to data

```{r}
write.csv(res, file="class12results.csv")
```

## Pathway analysis

We can use the KEGG database of biological pathways to get some more insight into our differential expressed genes and the kinds of biology they are involved in

Look at the first two KEGG analysis
```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez

```

```{r}
x <- 1:3
x
```

```{r}
names(x) <- c("chandra", "lisa", "xinqiu")
x
```

```{r}
head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```


```{r}
attributes(keggres)
```

Look at the less 3
```{r}
head(keggres$less, 3)
```

Now I can use the **KEGG IDs** ("hsa05310" etc.) of these pathways from gage to view our genes mapped to these paths.

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![Asthma pathway from KEGG with our genes shown in color](hsa05310.pathview.png)


